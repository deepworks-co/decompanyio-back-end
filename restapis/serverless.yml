# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend-restapis # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-west-1
  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name
  #apiName: ${self:service.name}-api      # Api Gateway Name
  environment:
    stage: ${self:provider.stage}
    region: ${self:provider.region}
    servicename: ${self:service.name}
    AUTH0_CLIENT_ID: ${file(./auth0/secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0/decompany.pem)}
    NODE_PATH: "./:/opt/node_modules"
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:*
       - s3:*
       - logs:*
       - sqs:*
       - kinesis:*
       - kms:*
      Resource: "*"
# you can add statements to the Lambda function's IAM Role here
  vpc:
    securityGroupIds:
      - sg-05a13849fc117801b
    subnetIds:
      - subnet-37594850
      - subnet-38bb9963

# you can define service wide environment variables here
  #environment:
  #  CROS: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

package:
  individually: true
  exclude:
    - .gitignore
    - .env
    - package.json
    - install.sh
    - opt/**

layers:
  libNodeModule:
    path: opt
    description: "additional node_module"
    
functions:
  curatorDocumentList:
    handler: controllers/curator/curatorDocumentList.handler
    events:
      - http:
          path: /api/curator/document/list
          method: get
          cors: true      
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/curator/document/list"
            description: "/api/curator/document/list"
            queryParams:
              - name: ethAccount
                description: ethAccount
                type: string
                required: true
              - name: pageNo
                description: pageNo (default 1)
                type: integer
              - name: pageSize
                description: pageSize (default 20)
                type: integer
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"
  curatorTodayDocumentList:
    handler: controllers/curator/curatorTodayDocumentList.handler
    events:
      - http:
          path: /api/curator/document/today
          method: post
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')

  zapierEmail:
    handler: controllers/zapier/email.handler
    events:
      - http:  
          path: /api/zapier/email
          method: get
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')

  analyticsList:
    handler: controllers/analytics/list.handler
    events:
      - http:
          path: /api/analytics/list
          method: get
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/analytics/list"
            description: "/api/analytics/list"
            queryParams:
              - name: documentId
                description: document id
                type: string
                required: true
              - name: week
                description: 4 week(1 month), 8 week (2month)
                type: integer
              - name: month
                description: 12 (1 year)
                type: integer
              - name: csv
                description: csv(true or false ) default false
                type: boolean
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"
  analyticsExport:
    handler: controllers/analytics/export.handler
    events:
      - http:
          method: get
          path: /api/analytics/export
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/analytics/export"
            description: "/api/analytics/export"
            queryParams:
              - name: documentId
                description: document id
                type: string
                required: true
              - name: week
                description: 4 week(1 month), 8 week (2month)
                type: integer
              - name: year
                description: 12 month
                type: integer
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  tagList:
    handler: controllers/tag/list.handler
    events:
      - http:
          path: /api/tags
          method: get
          cors: true
          documentation:
            summary: "/api/tags"
            description: "/api/tags"
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"


  s3DocumentUploadComplete:
    handler: s3/document/uploadComplete.handler
    events:
      - existingS3: 
          bucket: ${file(./resources/app-properties.${self:provider.stage}.json):s3Config.document}
          events:
            - s3:ObjectCreated:Put
          rules:
            - prefix: FILE/

  s3DocumentConvertComplete:
    handler: s3/document/convertComplete.handler
    layers:   
      - {Ref: LibNodeModuleLambdaLayer}
    events:
      - existingS3: 
          bucket: ${file(./resources/app-properties.${self:provider.stage}.json):s3Config.document}
          events: 
            - s3:ObjectCreated:Put
          rules:
            - prefix: THUMBNAIL/

  accountPicture:
    handler: controllers/account/picture.handler
    events:
      - http: 
          path: /api/account/picture
          method: post
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
            statusCode:
              500:
                template: $input.path('$.errorMessage')
          documentation:
            summary: "/api/account/picture"
            description: "/api/account/picture"
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  accountEthereumSync:
    handler: controllers/account/accountEthereumSync.handler
    events:
      - http: 
          method: post
          path: /api/account/ethereumSync
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
            statusCode:
              500:
                template: $input.path('$.errorMessage')
          documentation:
            summary: "/api/account/ethereumSync"
            description: "/api/account/ethereumSync"
            queryParams:
              - name: ethAccount
                description: ethereum account
                type: string
                required: true
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  profileGet:
    handler: controllers/profile/getProfile.handler
    events:
      - http:
          path: /api/profile/get
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/profile/get by no auth"
            description: "/api/profile/get by no auth"
            queryParams:
              - name: email
                description: email
                type: string
                required: true
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"
  accountAuth:
    handler: controllers/account/auth.handler

  accountGet:
    handler: controllers/account/get.handler
    events:
      - http:
          path: /api/account/get
          method: get
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')

  accountUpdate:
    handler: controllers/account/update.handler
    events:
      - http: 
          path: /api/account/update
          method: post
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/profile/get by no auth"
            description: "/api/profile/get by no auth"
            queryParams:
              - name: nickname
                description: nickname
                type: string
              - name: username
                description: username
                type: string
              - name: picture
                description: picture path
                type: string
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"
    
  accountSync:
    handler: controllers/account/sync.handler
    events:
      - http: 
          path: /api/account/sync
          method: post
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')

  oraclizeController:
    handler: controllers/oraclizeController/index.handler
    events:
      - http: get /api/oraclize/viewcount

  documentRegist:
    handler: controllers/document/documentController.regist
    events:
      - http:
          path: api/document/regist
          method: post
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')

  documentList:
    handler: controllers/document/documentController.list
    events:
      - http:
          path: api/document/list
          method: post
          cors: true
          integration: lambda
          request:
            application/json: '{ "httpMethod" : "$context.httpMethod" }'
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
              Cache-Control: "'max-age=120'"
            template: $input.path('$')
      - http:
          path: api/document/list
          method: get
          cors: true
          integration: lambda
          request:
            application/json: '{ "httpMethod" : "$context.httpMethod" }'
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
              Cache-Control: "'max-age=120'"
            template: $input.path('$')

  documentInfo:
    handler: controllers/document/documentController.info
    events:
      - http:
          path: api/document/info/{documentId}
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
              Cache-Control: "'max-age=120'"
            template: $input.path('$')

  documentUpdate:
    handler: controllers/document/documentUpdate.handler
    events:
      - http:
          path: /api/document/update
          method: post
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')

  documentVote:
    handler: controllers/document/documentController.vote
    events:
      - http:
          path: api/document/vote/{documentId}
          method: post
          cors: true
          request:
            parameters:
                paths:
                  id: true
            

  documentDownload:
    handler: controllers/document/documentController.downloadFile
    events:
      - http:
          path: /api/document/download
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/document/download"
            description: "/api/document/download"
            queryParams:
              - name: documentid
                description: document id
                type: string
                required: true
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  trackingList:
    handler: controllers/tracking/list.handler
    events:
      - http: 
          path: /api/tracking/list
          method: get
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/tracking/list"
            description: "/api/tracking/list"
            queryParams:
              - name: documentid
                description: document id
                type: string
                required: true
              - name: anonymous
                description: include anonymous 
                type: boolean
              - name: include
                description: include 1 page view 
                type: boolean
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  trackingInfo:
    handler: controllers/tracking/info.handler
    events:
      - http: 
          path: /api/tracking/info
          method: get
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/tracking/info"
            description: "/api/tracking/info"
            queryParams:
              - name: documentid
                type: string
                description: document id
                required: true
              - name: cid
                description: client id
                type: string
                required: true
              - name: include
                description: include 1 page only (true or false), default false
                type: boolean
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

  trackingCollect:
    handler: controllers/tracking/collect.handler
    events:
      - http: 
          path: api/tracking/collect
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "tracking collector"
            description: "api/tracking/collect"
            queryParams:
              - name: cid
                description: client id
                type: string
                required: true
              - name: sid
                description: session id
                type: string
                required: true
              - name: t
                description: event timestamp
                type: number
                required: true
              - name: e
                description: email
                type: string
              - name: ev
                description: event type [view, leave]
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"
  trackingExport:
    handler: controllers/tracking/trackingExport.handler
    events:
      - http: 
          method: get
          path: /api/tracking/export
          cors: true
          authorizer: accountAuth
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.header.Content-Type
            template: $input.path('$')
          documentation:
            summary: "/api/tracking/export"
            description: "/api/tracking/export"
            queryParams:
              - name: documentId
                description: document id
                type: string
                required: true   
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "Response body description"
                responseModels:
                  "application/json": "DefaultResponse"

# you can add CloudFormation resource templates here
resources:
  Resources:
  
    GatewayResponse4xx:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: 'ApiGatewayRestApi'

    GatewayResponse5xx:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: 
          Ref: 'ApiGatewayRestApi'


custom:
  serverless-offline:
    port: 4080
  documentation:
    api:
      info:
        version: '1'
        title: Rest API
        description: Decompany Rest Api
        termsOfService: https://www.google.com
        contact:
          name: Jay
          email: jay@decompany.io
        license:
          name: Decompany
          url: https://www.decompany.io
    models:
      -
        name: "ErrorResponse"
        description: "This is an error"
        contentType: "application/json"
        schema: ${file(models/error.json)}
      -
        name: "DefaultResponse"
        description: "default response"
        contentType: "application/json"
        schema: ${file(models/default_response.json)}
plugins:
  - serverless-offline
  - serverless-aws-documentation
  - serverless-mocha-plugin
  - serverless-plugin-existing-s3
