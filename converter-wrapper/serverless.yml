# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: converter-wrapper # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${file(./serverlessConfig.js):region}
  #stackName: ${self:service.name}-${self:provider.stage}-stack  # CloudFormation Stack Name
  #apiName: ${self:service.name}-api      # Api Gateway Name
  environment:
    stage: ${self:provider.stage}
    region: ${self:provider.region}
    servicename: ${self:service.name}
    NODE_PATH: "./:/opt/node_modules"
  tags:
    stage: ${self:provider.stage}
    region: ${self:provider.region}
    servicename: ${self:service.name}
    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}
    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}
    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:*
       - s3:*
       - logs:*
       - sqs:*
       - kinesis:*
       - kms:*
       - ses:*
       - codedeploy:*
      Resource: "*"
# you can add statements to the Lambda function's IAM Role here
  vpc:
    securityGroupIds: 
      "Fn::Split":
        - ","
        - ${file(./serverlessConfig.js):vpc.securityGroupIds}
    subnetIds: 
      "Fn::Split":
        - ","
        - ${file(./serverlessConfig.js):vpc.subnetIds}
package:
  individually: false
  exclude:
    - .gitignore
    - .env
    - package.json
    - install.sh
    - opt/**
    - test/**
    
functions:

  autoCheckConvertFailDocument:
    handler: src/document/autoCheckConvertFailDocument.handler
    timeout: 30
    events:
      - schedule: rate(1 minute)
  
  pdfConvertComplete:
    handler: src/document/pdfConvertComplete.handler
    events:
      - existingS3: 
          bucket: ${file(./serverlessConfig.js):s3Config.document}
          events:
            - s3:ObjectCreated:Put
          rules:
            - prefix: PDF/

  accountPictureConverter:
    handler: src/account/accountPictureConverter.handler
    layers:   
      - ${file(./serverlessConfig.js):getSharpLayer}
    events:
      - existingS3: 
          bucket: ${file(./serverlessConfig.js):s3Config.upload_profile}
          events: 
            - s3:ObjectCreated:Put

  s3DocumentUploadComplete:
    handler: src/document/uploadComplete.handler
    events:
      - existingS3: 
          bucket: ${file(./serverlessConfig.js):s3Config.document}
          events:
            - s3:ObjectCreated:Put
          rules:
            - prefix: FILE/

  s3DocumentConvertComplete:
    handler: src/document/convertComplete.handler
    layers:   
      - ${file(./serverlessConfig.js):getSharpLayer}
    events:
      - existingS3: 
          bucket: ${file(./serverlessConfig.js):s3Config.document}
          events: 
            - s3:ObjectCreated:Put
            - s3:ObjectCreated:Copy
          rules:
            - prefix: THUMBNAIL/

custom:
  prune:
    automatic: true
    number: 5
  splitStacks:
    perFunction: false
    perType: true
  
plugins:
  - serverless-mocha-plugin
  - serverless-plugin-existing-s3
  - serverless-plugin-split-stacks
  - serverless-prune-plugin