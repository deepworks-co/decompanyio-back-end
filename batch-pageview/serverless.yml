# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: batch-pageview # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: ${file(./serverlessConfig.js):region}
  stage: ${opt:stage, 'dev'}
  vpc:
    securityGroupIds: 
      "Fn::Split":
        - ","
        - ${file(./serverlessConfig.js):vpc.securityGroupIds}
    subnetIds: 
      "Fn::Split":
        - ","
        - ${file(./serverlessConfig.js):vpc.subnetIds}
  environment:
    stage: ${self:provider.stage}
    region: ${self:provider.region}
    servicename: ${self:service.name}
  tags:
    stage: ${self:provider.stage}
    region: ${self:provider.region}
    servicename: ${self:service.name}
    GIT_DEPLOY_REVISION: ${file(./serverlessConfig.js):git_revision}
    GIT_DEPLOY_BRANCH: ${file(./serverlessConfig.js):git_branch}
    DEPLOY_DATE: ${file(./serverlessConfig.js):toDateString}
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - s3:*
       - logs:*
       - sqs:*
       - kinesis:*
       - events:*
       - kms:*
      Resource: "*"   
  exclude:
    - .gitignore
    - .env

functions:
  recentlyStartFunc:
    handler: functions/sf/recentlyStartFunc.handler
    timeout: 300
  dailyStartFunc:
    handler: functions/sf/dailyStartFunc.handler
    timeout: 300
  dailyPageviewAggregate:
    handler: functions/sf/dailyPageviewAggregate.handler
    timeout: 300
  dailyDownloadAggregate:
    handler: functions/sf/dailyDownloadAggregate.handler
    timeout: 300
  dailyTotalPageviewAggregate:
    handler: functions/sf/dailyTotalPageviewAggregate.handler
    timeout: 300
    
  makeRewardPool:
    handler: functions/mgr/makeRewardPool
      
  generatePopular:
    handler: functions/cron/generatePopular.handler
    timeout: 300
    events:
      - schedule: rate(5 minutes)
  
  generateFeatured:
    handler: functions/cron/generateFeatured.handler
    timeout: 300
    events:
      - schedule: rate(5 minutes)

  generateTopTag:
    handler: functions/cron/generateTopTag.handler
    timeout: 300
    events:
      - schedule: rate(5 minutes)
      
stepFunctions:
  validate: true
  stateMachines:
  #  dailyAggregateRoyalty:
  #    events:
  #      - schedule: 
  #          rate: cron(30 0 * * ? *)
  #    definition:
  #      StartAt: aggregatePageviewState
  #      States:
  #        aggregatePageviewState:
  #          Type: Task
  #          Resource:
  #            Fn::GetAtt:
  #              - dailyPageview
  #              - Arn
  #          End: true
    dailyAggregateEvent:
      events:
        - schedule: 
            rate: cron(20 0 * * ? *)
      definition:
        StartAt: dailyStartFunc
        States:
          dailyStartFunc:
            Type: Task
            Resource:
              Fn::GetAtt:
                - dailyStartFunc
                - Arn
            Next: dailyDownloadAggregate
          dailyDownloadAggregate:
            Type: Task
            Resource:
              Fn::GetAtt:
                - dailyDownloadAggregate
                - Arn
            Next: dailyPageviewAggregate
          dailyPageviewAggregate:
            Type: Task
            Resource:
              Fn::GetAtt:
                - dailyPageviewAggregate
                - Arn          
            Next: dailyTotalPageviewAggregate
          dailyTotalPageviewAggregate:
            Type: Task
            Resource:
              Fn::GetAtt:
                - dailyTotalPageviewAggregate
                - Arn          
            End: true

    recentlyAggregateEvent:
      events:
        - schedule: 
            rate: rate(5 minutes)
      definition:
        StartAt: recentlyStartFunc
        States:
          recentlyStartFunc:
            Type: Task
            Resource:
              Fn::GetAtt:
                - recentlyStartFunc
                - Arn
            Next: dailyDownloadAggregate
          dailyDownloadAggregate:
            Type: Task
            Resource:
              Fn::GetAtt:
                - dailyDownloadAggregate
                - Arn
            Next: dailyPageviewAggregate
          dailyPageviewAggregate:
            Type: Task
            Resource:
              Fn::GetAtt:
                - dailyPageviewAggregate
                - Arn          
            Next: dailyTotalPageviewAggregate
          dailyTotalPageviewAggregate:
            Type: Task
            Resource:
              Fn::GetAtt:
                - dailyTotalPageviewAggregate
                - Arn          
            End: true
plugins:
  - serverless-mocha-plugin
  - serverless-step-functions