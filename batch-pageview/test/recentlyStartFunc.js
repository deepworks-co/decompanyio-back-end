'use strict';

// tests for dailyPageviewAggregate
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped1 = mochaPlugin.getWrapper('dailyDownloadAggregate', '/functions/sf/dailyDownloadAggregate.js', 'handler');
let wrapped2 = mochaPlugin.getWrapper('dailyPageviewAggregate', '/functions/sf/dailyPageviewAggregate.js', 'handler');
let wrapped3 = mochaPlugin.getWrapper('dailyTotalPageviewAggregate', '/functions/sf/dailyTotalPageviewAggregate.js', 'handler');


describe('dailyStartFunc', () => {
  before((done) => {
    done();
  });

  it('implement tests here', () => {
    
    const endDate = getDate(new Date(), 1);// new Date(now - 1000 * 60 * 60 * 24 * 10);
  
    const start = getBlockchainTimestamp(new Date());
    const end = getBlockchainTimestamp(endDate);

    const event = {
      start,
      end
    }
    console.log(event);
    return wrapped1.run(event).then((event2)=>{
      return wrapped2.run(event2)
    }).then((event3)=>{
      return wrapped3.run(event3)
    }).then((response)=>{
      expect(response).to.not.be.empty;
    }).catch((err)=>{
      console.error(err)
    })
    
  });
});

function getDate(date, days){
  const baseDate = new Date(date);
  return new Date(baseDate.setDate(baseDate.getDate() + days));
}

function getBlockchainTimestamp(date){
  // daily YYYY-MM-DD 00:00:00(실행기준에서 전날 일자)
  //let yesterday = new Date(); /* 현재 */
  //yesterday.setDate(yesterday.getDate() - 1);

  
  let convertedDate = null;
  if(typeof(date) === 'string'){
    //yyyy-mm-dd string
    convertedDate = toUTCDate(date);    
  } else if(typeof(date) === 'object'){
    //Date type
    convertedDate = date;
  } else if(typeof(date) === 'number') {
    convertedDate = new Date(date);
  } else {
    throw new Error('Unsupported datatype.' + typeof(date));
  }
  
  const timestamp = convertedDate.getTime() - (convertedDate.getTime() % (1000 * 60 * 60 * 24));

  return timestamp;
}